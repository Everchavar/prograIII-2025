{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMgrRBuXX+PvnuxjWJJJ4jN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Everchavar/prograIII-2025/blob/main/parcial_computo_1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e1WIO85TbxWR",
        "outputId": "8c801d44-6ed2-49ca-f7a0-32c30d3e62e3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hola mundo\n",
            "Bienvenidos a programacion computacional III\n"
          ]
        }
      ],
      "source": [
        "print(\"Hola mundo\")\n",
        "print(\"Bienvenidos a programacion computacional III\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nombre = \"Ever Chavarria\"\n",
        "edad = 5\n",
        "print (nombre,edad)\n",
        "\n",
        "edad =\"cinco\"\n",
        "print (\"Tu edad :\", edad)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DrSMcwG8dKxf",
        "outputId": "bb59d310-3740-4bb1-d865-f6d72105964b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ever Chavarria 5\n",
            "Tu edad : cinco\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num1 = 5\n",
        "num2 = 8.9\n",
        "suma = num1 + num2\n",
        "print (\"La suma es: \", suma)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xxLSh5Icd1xX",
        "outputId": "3e24f696-3a18-4271-cf48-da33254fa2fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La suma es:  13.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num1 =float (input (\"num1: \"))\n",
        "num2 =float (input (\"num2: \"))\n",
        "suma =float (( num1 + num2))\n",
        "print (\"La suma es: \", suma)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0FqcfVmxfj4e",
        "outputId": "f1a6f9b6-2c6f-4524-ff27-59b9820fc015"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "num1: 5\n",
            "num2: 5\n",
            "La suma es:  10.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num1 =float (input (\"num1: \"))\n",
        "num2 =float (input (\"num2: \"))\n",
        "resta =float (( num1 - num2))\n",
        "print (\"La resta es: \", resta)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oAILtqhBhyrp",
        "outputId": "f66e52c1-8f29-4546-8bb7-5f5a35ad5371"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "num1: 3\n",
            "num2: 2\n",
            "La resta es:  1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Restas\n",
        "res1 = int(input(\"ingrese el primer numero: \"))\n",
        "res2 = int(input(\"ingrese el segundo numero: \"))\n",
        "\n",
        "Respuesta = res1 - res2\n",
        "print(\"la resta de los numeros es:\", Respuesta)\n",
        "\n",
        "def restar_dos_numeros():\n",
        "    num1 = int(input(\"Ingrese el primer número: \"))\n",
        "    num2 = int(input(\"Ingrese el segundo número: \"))\n",
        "    return num1 - num2\n",
        "resultado = restar_dos_numeros()\n",
        "print(\"La resta de los números es:\",resultado)"
      ],
      "metadata": {
        "id": "JkHWEmqkWVAn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "653568cd-4699-42c6-8da6-bcd5bccf5a27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese el primer numero: 4\n",
            "ingrese el segundo numero: 2\n",
            "la resta de los numeros es: 2\n",
            "Ingrese el primer número: 3\n",
            "Ingrese el segundo número: 1\n",
            "La resta de los números es: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TIPOS DE DATOS EN PYTHON"
      ],
      "metadata": {
        "id": "sIMGNuyo_cJW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#ENTERO\n",
        "num1 = 6\n",
        "print(num1, \"Esto es un numero entero\")\n",
        "print( str(num1) + \" Esto es un entero\"  )\n",
        "\n",
        "#DECIMAL\n",
        "num2 = 7.5\n",
        "print(num2, \"Esto es un numero decimal\")\n",
        "\n",
        "#BOOLEANO\n",
        "esMayor = True\n",
        "print(esMayor, \"Esto es un booleano\")\n",
        "\n",
        "#CADENA\n",
        "nombre = \"Luis Hernandez\"\n",
        "cadena = input(\"Dime una cadena: \")\n",
        "valor = int(input(\"Dime un valor: \"))\n",
        "print(nombre, \"Esto es una cadena\", cadena[:valor])\n",
        "\n",
        "print( nombre, \"Letra inicial\", nombre[0],  \"Un valor especifico\", nombre[5], \"rango\", nombre[0:4], \"Comenzar desde el final\", nombre[-1])\n",
        "print( nombre[5:len(nombre)], nombre[:4] )\n",
        "print(type(nombre))\n"
      ],
      "metadata": {
        "id": "ofY9Mu66_fDf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#FECHAS\n",
        "from datetime import datetime, date, time\n",
        "fecha = datetime.now()\n",
        "print(fecha, fecha.date(), fecha.time())\n",
        "print(type(fecha))\n",
        "\n",
        "fechaPersonalizada = date(2025,8,1)\n",
        "print(fechaPersonalizada)\n",
        "\n",
        "fecha = \"2025-08-08\"\n",
        "fecha = datetime.strptime(fecha, \"%Y-%m-%d\")\n",
        "print(fecha)\n",
        "\n",
        "print( fecha.strftime(\"%d/%m/%Y\"), \"Regresamos a clases \" )\n",
        "\n",
        "fechaNac = input(\"Dime tu fecha de nacimiento en formato d-m-Y: \")\n",
        "fechaNac = datetime.strptime(fechaNac, \"%d-%m-%Y\")\n",
        "print(fechaNac)"
      ],
      "metadata": {
        "id": "6aI0cz8E_nan"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "FUNCIONES EN PYTHON"
      ],
      "metadata": {
        "id": "R4pBqQtY_wc5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Suma\n",
        "def suma(num1, num2):\n",
        "  return num1 + num2\n",
        "print(\"La suma de 5 + 8 = \", suma(5,8))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hLNPPSHFABsL",
        "outputId": "1ef5ec65-278c-4b43-b207-292d43715568"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La suma de 5 + 8 =  13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num1 = float(input(\"Num1: \"))\n",
        "num2 = float(input(\"Num2: \"))\n",
        "respuesta = suma(num1, num2)\n",
        "print(\"La suma es: \", respuesta)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u3YUYtRwAscV",
        "outputId": "85638b53-560d-4e39-f58c-109e17fe9520"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Num1: 5\n",
            "Num2: 5\n",
            "La suma es:  10.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacer un ejercicio en python haciendo uso de las funciones, que reste dos numeros introducidos por el usuario. TAREA.\n"
      ],
      "metadata": {
        "id": "3wdhjkaLA0tg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Restar\n",
        "def Resta():\n",
        "  num1 = int(input(\"Ingrese el primer número: \")) # Cambiado n1 a num1 y solo se pide una vez\n",
        "  num2 = int(input(\"Ingrese el segundo número: \")) # Cambiado n1 a num2\n",
        "  return num1 - num2 # La función retorna la resta directamente\n",
        "\n",
        "# Llamamos a la función y almacenamos el resultado en una variable\n",
        "resultado = Resta()\n",
        "print(\"La resta es: \", resultado) # Imprimimos la variable que contiene el resultado de la función"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b0qsWj0zA46g",
        "outputId": "263c093d-bf2e-41f1-8a75-e56fb9e6d039"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el primer número: 5\n",
            "Ingrese el segundo número: 2\n",
            "La resta es:  3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Multiplicacion\n",
        "def multiplicacion():\n",
        "  num1 = float (input(\"Ingrese el primer numero a multiplicar: \"))\n",
        "  num2 = float (input(\"Ingrese el segundo numero a multiplicar: \"))\n",
        "  return num1 * num2\n",
        "\n",
        "respuesta = multiplicacion() # Llamamos a la función y almacenamos el resultado\n",
        "print(\"El resultado de la multiplicacion es el siguiente: \", respuesta) # Imprimimos el resultado"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A7SkCwoPFqB3",
        "outputId": "16d51116-3366-45e9-dac2-7af904a839dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el primer numero a multiplicar: 3\n",
            "Ingrese el segundo numero a multiplicar: 3\n",
            "El resultado de la multiplicacion es el siguiente:  9.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def dividir():\n",
        "  num1 = int (input(\"Ingrese el primer numero a dividir: \"))\n",
        "  num2 = int (input(\"Ingrese el segundo numero a dividir: \"))\n",
        "  return num1 / num2\n",
        "\n",
        "respuesta = dividir()\n",
        "print(\"El resultado de la division es el siguiente: \", respuesta)"
      ],
      "metadata": {
        "id": "un04KrfjHkDh",
        "outputId": "c56bd6e9-7b43-417e-c364-9455cd5d0b28",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el primer numero a dividir: 2\n",
            "Ingrese el segundo numero a dividir: 2\n",
            "El resultado de la division es el siguiente:  1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacer un ejercicio de python haciendo uso de las funciones de usuario, que convierta grados celcius a Farenheit\n",
        "def CelciusaFarenheit(c):\n",
        "   return c*1.8 + 32\n"
      ],
      "metadata": {
        "id": "DqljQ0uZWYb1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def CelciusaFarenheit(c):\n",
        " return c*1.8 + 32\n",
        "\n",
        "c = int(input(\"Grados c: \"))\n",
        "f = CelciusaFarenheit(c)\n",
        "print(\"F: \", f)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fJ7RtIbVYVnp",
        "outputId": "51d5243f-1947-49bb-b64c-2201a052be84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Grados c: 38\n",
            "F:  100.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacer un ejercicio de python haciendo uso de funciones de usuario, que covierta grados Farenheit a celcius\n",
        "\n",
        "def FarenheitCelcius(f):\n",
        "   return (f-32)/1.8\n"
      ],
      "metadata": {
        "id": "05jyO62caviv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "  f  = float(input(\"Grados f: \"))\n",
        "  c = FarenheitCelcius(f)\n",
        "  print(\"c: \", c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V9RhuGPAcBhc",
        "outputId": "22e6fdda-1724-47f1-b7f7-308b9ffe6e16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Grados f: 100.4\n",
            "c:  38.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacer un ejercicio en python que covierta de grados celsius a kelvin\n",
        "\n",
        "def celsiuskelvin(celsius):\n",
        "  return celsius + 273.15\n",
        "\n",
        "celsius = float(input(\"Grados celsius: \"))\n",
        "kelvin = celsiuskelvin(celsius)\n",
        "print(\"Kelvin: \", kelvin)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FMLSBlI3e9Uw",
        "outputId": "e56eb120-871a-44d0-d5b1-fa98b69c2d7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Grados celsius: 35\n",
            "Kelvin:  308.15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacer un ejercicio en python haciendo uso de funciones de usuario, que calcule\n",
        "#el sueldo de un empleado, segun el numero de hrs trabajadas y el valor por hora\n",
        "def sueldo(numHrs, valorXhr):\n",
        "    sueldo = numHrs*valorXhr*30\n",
        "    return sueldo\n",
        "\n",
        "numHrs = float(input(\"Horas trabajadas: \"))\n",
        "valorXhr = float(input(\"Valor por hora: \"))\n",
        "sueldo_calculado = sueldo(numHrs, valorXhr)\n",
        "print(sueldo_calculado)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "22i2KLTchrVP",
        "outputId": "5a012200-18de-40d5-c706-7dc643137144"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Horas trabajadas: 8\n",
            "Valor por hora: 5\n",
            "1200.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacer un ejercicio en python haciendo uso de funciones de usuario, que permita elevar un numero a un exponente\n",
        "def exponencial (b,e):\n",
        "  return b**e\n",
        "\n",
        "b = float(input(\"Base: \"))\n",
        "e = float(input(\"Exponente: \"))\n",
        "\n",
        "\n",
        "resultado = exponencial (b,e)\n",
        "print (\"El numero\", b, \"elevado a\", e, \"el resultado es:\", resultado)"
      ],
      "metadata": {
        "id": "xFL8rDGSj_Gk",
        "outputId": "50743786-01b8-4ae5-95ae-4ea67bcdb09c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Base: 2\n",
            "Exponente: 4\n",
            "El numero 2.0 elevado a 4.0 el resultado es: 16.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "FUNCIONES ANONIMAS"
      ],
      "metadata": {
        "id": "FlwFWsacIQSe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def suma(a,b):\n",
        "  return a+b\n",
        "a = float(input(\"Num1: \"))\n",
        "b = float(input(\"Num2: \"))\n",
        "suma = suma(a,b)\n",
        "print(\"La suma es: \", suma)\n",
        "\n"
      ],
      "metadata": {
        "id": "45i3S1buIVlg",
        "outputId": "29abe9c0-6762-44cf-ad30-42331be4e431",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Num1: 2\n",
            "Num2: 2\n",
            "La suma es:  4.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = float(input(\"Num1: \"))\n",
        "b = float(input(\"Num2: \"))\n",
        "\n",
        "sum = lambda a,b: a+b\n",
        "print( \"La suma de \", a, \" mas b \", b, \" es igual \", sum(a,b) )"
      ],
      "metadata": {
        "id": "V2q7HsD3I9Vk",
        "outputId": "c5ebd65b-02a4-489e-e680-13cd3b66a401",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Num1: 3\n",
            "Num2: 3\n",
            "La suma de  3.0  mas b  3.0  es igual  6.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#reduce\n",
        "from functools import reduce\n",
        "\n",
        "numeros =[5,4,9,6,8,2,3]\n",
        "suma = reduce (lambda acum, num: num+acum, numeros)\n",
        "\n",
        "sumaPares = reduce (lambda acum, num : num + acum, filter (lambda num: num % 2 == 0, numeros))\n",
        "sumaPar = reduce (lambda acum, num : acum + num if num%2==0 else acum, numeros, 0)\n",
        "\n",
        "print(\"La suma es: \", suma)\n",
        "print(\"La suma de los pares es: \", sumaPares)\n",
        "print(\"La suma de los pares es: \", sumaPar)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fmKIkXfYZu5L",
        "outputId": "a3066b29-9d24-4e34-d90b-923b7e04cf8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La suma es:  37\n",
            "La suma de los pares es:  20\n",
            "La suma de los pares es:  20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Pedir las notas al usuario separadas por comas\n",
        "notas = input(\"Introduce las notas separadas por comas: \")\n",
        "\n",
        "notas = list(map(float, notas.split(\",\")))\n",
        "\n",
        "aprobados = list(filter(lambda n: n >= 6, notas))\n",
        "\n",
        "reprobados = list(filter(lambda n: n < 6, notas))\n",
        "\n",
        "print(f\"Notas ingresadas: {notas}\")\n",
        "print(f\"Aprobados: {len(aprobados)} → {aprobados}\")\n",
        "print(f\"Reprobados: {len(reprobados)} → {reprobados}\")\n"
      ],
      "metadata": {
        "id": "ntGCmN_Oc1kT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "FUNCIONES PRECONSTRUIDAS\n"
      ],
      "metadata": {
        "id": "WsY3b7trJOy_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def extraerPrimeraLetra(dia):\n",
        "  return dia[0]\n",
        "\n",
        "\n",
        "#map\n",
        "semana = [\"Domingo\", \"Lunes\", \"Martes\", \"Miercoles\", \"Jueves\", \"Viernes\", \"Sabado\"]\n",
        "\n",
        "primeraLetraDia = map(lambda dia: dia[0], semana)\n",
        "print(list(primeraLetraDia))\n",
        "\n",
        "mayusSemana = map(lambda dia: dia.upper(), semana)\n",
        "print(list(mayusSemana))\n",
        "\n",
        "print( list(map(extraerPrimeraLetra, semana)) )\n"
      ],
      "metadata": {
        "id": "sBC0tIiWJQpm",
        "outputId": "ed5fc08d-dfb6-4356-eb61-b5616af87f86",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['D', 'L', 'M', 'M', 'J', 'V', 'S']\n",
            "['DOMINGO', 'LUNES', 'MARTES', 'MIERCOLES', 'JUEVES', 'VIERNES', 'SABADO']\n",
            "['D', 'L', 'M', 'M', 'J', 'V', 'S']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numeros = [2,4,6,8,7,9]\n",
        "potencia = int(input(\"Potencia: \"))\n",
        "numeroPotencia = map(lambda num: num**potencia, numeros)\n",
        "\n",
        "print(list(numeroPotencia))"
      ],
      "metadata": {
        "id": "Nc753jorJWJ9",
        "outputId": "50a4e60f-9d25-4bb5-bb59-1a944bad83f5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Potencia: 2\n",
            "[4, 16, 36, 64, 49, 81]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "ntabla  = int(input(\"Tabla:\"))\n",
        "numeros = [1,2,3,4,5,6,7,8,9,10]\n",
        "tabla = map(lambda num: num*ntabla, numeros)\n",
        "\n",
        "print(list(tabla))\n"
      ],
      "metadata": {
        "id": "G-Txd1cBJene"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "serie = [5,6,9,2,7,8]\n",
        "pares = filter(lambda num: num%2==0, serie) #% ===> a modulo, obtener el residuo.\n",
        "\n",
        "print(list(pares))\n",
        "\n",
        "impares = filter(lambda num: num%2!=0, serie)\n",
        "\n",
        "print(list(impares))\n"
      ],
      "metadata": {
        "id": "ycFAhARCJhsv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "serieUser = input(\"Serie: \") # \"5,2,8,1\" --> serie[0]=\"5\"; serie[1]=\"2\"; etc..\n",
        "serieUser = serieUser.split(\",\")\n",
        "\n",
        "pares = filter(lambda num: int(num)%2==0, serieUser)\n",
        "impares = filter(lambda num: int(num)%2!=0, serieUser)\n",
        "\n",
        "print(\"Pares: \",list(pares))\n",
        "print(\"Impares: \", list(impares))"
      ],
      "metadata": {
        "id": "q94mRenJJmP_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#reduce\n",
        "from functools import reduce\n",
        "\n",
        "numeros = [5,4,9,6,8,2,3]\n",
        "suma = reduce(lambda acum, num: num+acum, numeros)\n",
        "\n",
        "sumaPares = reduce(lambda acum, num: num+acum, filter(lambda num: num%2==0, numeros))\n",
        "sumaPar = reduce(lambda acum, num: acum + num if num%2==0 else acum, numeros,0)\n",
        "\n",
        "print(\"La suma es: \", suma)\n",
        "print(\"La suma de los pares es: \", sumaPares)\n",
        "print(\"Suma Pares: \", sumaPar)\n"
      ],
      "metadata": {
        "id": "r-6CsfpPJvHI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "TUPLAS"
      ],
      "metadata": {
        "id": "NknsInCsJ01J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Tuplas\n",
        "\n",
        "tupla = (5, 3, 5)\n",
        "#tupla [0] = 5\n",
        "print(\"Tupla: \", tupla, \" primer elemento \", tupla[0],\" El numero 5 aparece \",tupla.count(5),\" veces\")\n",
        "print (\" Ultimo elemento: \", tupla[-1])\n",
        "print (\"Rango:\", tupla[0:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ww2-WnIxc9L1",
        "outputId": "8c1fc52d-425c-4570-e407-e5787c7a8ec5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tupla:  (5, 3, 5)  primer elemento  5  El numero 5 aparece  2  veces\n",
            " Ultimo elemento:  5\n",
            "Rango: (5, 3, 5)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from types import DynamicClassAttribute\n",
        "import datetime\n",
        "fecha = datetime.date.today()\n",
        "\n",
        "semana = (\"Domingo\", \"Lunes\", \"Martes\", \"Miercoles\", \"Jueves\", \"Viernes\", \"Sabado\")\n",
        "meses = (\"\",\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\")\n",
        "dia = fecha.day\n",
        "mes = fecha.month\n",
        "year = fecha.year\n",
        "diasemana = semana [fecha.isoweekday()]\n",
        "print(diasemana, dia, \"del\",meses [mes], \"del\", year)\n",
        "print(fecha,fecha.isoweekday(),diasemana)\n",
        "print(dia, mes, year)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qXnHYqzAiUH4",
        "outputId": "0047ff74-13c1-41ea-e10a-57798d346258"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Martes 12 del Agosto del 2025\n",
            "2025-08-12 2 Martes\n",
            "12 8 2025\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lista = [5,8,9,4, \"Progra III\", True, [4,8,9,[8,9,4]]]\n",
        "print(lista)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aJ6OLlyZmi05",
        "outputId": "dbcaf03e-db6b-4e91-a7ee-2850791b49d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 8, 9, 4, 'Progra III', True, [4, 8, 9, [8, 9, 4]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacer un ejercicio en python que obtenga la nota final de progra III del computo\n",
        "lista = [5,8,9,4, \"Progra III\", True, [4,8,9, [8,9,4]]]\n",
        "print(lista)\n",
        "\n",
        "[5, 8, 9, 4, 'Progra III', True, [4, 8, 9, [8, 9, 4]]]\n",
        "\n",
        "def calcularPromedio(nota, notas):\n",
        "  return notas[1]*notas[2] + nota # 8*0.3 + 9*0.3 + 10*0.3\n",
        "\n",
        "\n",
        "#Hacer un ejercicio en python que obtenga la nota final de Progra III del computo I, haciendo uso de las listas y de las funciones.\n",
        "from functools import reduce\n",
        "#estudiante...\n",
        "notas = [\n",
        "    [\"Lab1\", 10, 0.3],\n",
        "    [\"Lab2\", 10, 0.3],\n",
        "    [\"Parcial1\", 10, 0.4],\n",
        "\n",
        "    [\"Lab1\", 10, 0.3],\n",
        "    [\"Lab2\", 10, 0.3],\n",
        "    [\"Parcial2\", 10, 0.4],\n",
        "\n",
        "    [\"Lab1\", 10, 0.3],\n",
        "    [\"Lab2\", 10, 0.3],\n",
        "    [\"Parcial3\", 10, 0.4]\n",
        "  ]\n",
        "prom = reduce(calcularPromedio, notas, 0)\n",
        "nf = prom / 3\n",
        "print(\"Nota Final de Progra III: \", nf)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SdZMk5ERoHOU",
        "outputId": "6eca1ef7-dcd6-4f1d-af29-b99932e97a84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 8, 9, 4, 'Progra III', True, [4, 8, 9, [8, 9, 4]]]\n",
            "Nota Final de Progra III:  10.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacer un ejercicio en python que obtenga la nota final de Progra III del computo I,\n",
        "#donde el usuario va introducir las notas, haciendo uso de las listas y de las funciones.\n",
        "from functools import reduce\n",
        "\n",
        "notas = []\n",
        "for i in range(1,4):\n",
        "  nota = float(input(\"Act: \"+ str(i) + \": \"))\n",
        "  porcentaje = float(input(\"Porcentaje: \"))\n",
        "  notas.append([\"Act. \"+ str(i), nota, porcentaje])\n",
        "\n",
        "prom = reduce(calcularPromedio, notas, 0)\n",
        "print(\"Nota Final de C1 \", prom)\n"
      ],
      "metadata": {
        "id": "GMM5Rfwb9q26"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#sort\n",
        "valores = [5,8,9,1,3,4,7]\n",
        "\n",
        "print(valores, \"Lista original\")\n",
        "\n",
        "valores.sort()\n",
        "print(valores, \"POrdenados de menor a mayor\")\n",
        "\n",
        "valores.reverse()\n",
        "print(valores, \"Ordenados de mayor a menor\")\n",
        "\n",
        "#valores.sort(reverse=True)\n",
        "#print(valores, \"Ordenados de mayor a menor\")"
      ],
      "metadata": {
        "id": "sx5mre409zWa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "DICCIONARIOS - JSON"
      ],
      "metadata": {
        "id": "3cVqpdqB99r8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "persona = {\n",
        "  \"codigo\": \"USIS018804\",\n",
        "  \"nombre\": \"Luis Hernandez\",\n",
        "  \"materias\": [\n",
        "    {\n",
        "      \"codigo\": 611,\n",
        "      \"nombre\": \"Programacion I\",\n",
        "      \"notas\":{\n",
        "        \"c1\": {\"lab1\":8, \"lab2\":9.9, \"parcial\":10},\n",
        "        \"c2\": {\"lab1\":7.78, \"lab2\":6.5, \"parcial\":8},\n",
        "        \"c3\": {\"lab1\":10, \"lab2\":9, \"parcial\":9}\n",
        "      }\n",
        "    },\n",
        "    {\n",
        "      \"codigo\": 612,\n",
        "      \"nombre\": \"Programacion II\",\n",
        "      \"notas\":{\n",
        "        \"c1\": {\"lab1\":5, \"lab2\": 7, \"parcial\":9},\n",
        "        \"c2\": {\"lab1\":9, \"lab2\": 6, \"parcial\": 10},\n",
        "        \"c3\": {\"lab1\":10, \"lab2\": 10, \"parcial\": 9}\n",
        "      }\n",
        "    }\n",
        "  ]\n",
        "}\n",
        "print(persona[\"nombre\"], \"->\", persona[\"materias\"][0][\"nombre\"], \"-> CI: \",\n",
        "      persona[\"materias\"][0][\"notas\"][\"c1\"],\n",
        "      persona[\"materias\"][0][\"notas\"][\"c1\"][\"lab1\"]\n",
        "      )"
      ],
      "metadata": {
        "id": "LO0G1jk_-A3F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "ESTRUCTURAS DE CONTROL"
      ],
      "metadata": {
        "id": "zdW4v0pT-LFe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#if\n",
        "#hacer un ejercicio en python que permita clasificar las edades segun su rango\n",
        "edad = int(input(\"Edad: \"))\n",
        "if(edad<0):\n",
        "  print(\"Error al ingresar la edad, solo valores positivos.\")\n",
        "elif(edad<=2):\n",
        "  print(\"Eres un bebe...\")\n",
        "elif(edad<=11):\n",
        "  print(\"Eres un niño...\")\n",
        "elif(edad<18):\n",
        "  print(\"Eres un adolescente...\")\n",
        "elif(edad<65):\n",
        "  print(\"Eres un adulto responsable...\")\n",
        "elif(edad<85):\n",
        "  print(\"Eres un adulto mayor...\")\n",
        "else:\n",
        "  print(\"Larga vida...\")"
      ],
      "metadata": {
        "id": "ARtbwm8e-Nal"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tarea\n"
      ],
      "metadata": {
        "id": "7OYycHzeKUY9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# =========================\n",
        "# Conversores en Python la tarea :v\n",
        "# =========================\n",
        "\n",
        "def convertir(valor, factor):\n",
        "    return valor * factor\n",
        "\n",
        "# -------------------------\n",
        "# Conversores por categorías para asi no confundirse\n",
        "# -------------------------\n",
        "\n",
        "monedas = [\n",
        "    (\"USD -> EUR\", 0.86),      # Dólar estadounidense a Euro\n",
        "    (\"EUR -> USD\", 1/0.86),    # Euro a Dólar estadounidense\n",
        "    (\"USD -> MXN\", 18.83),     # Dólar estadounidense a Peso Mexicano\n",
        "    (\"MXN -> USD\", 1/18.83),   # Peso Mexicano a Dólar estadounidense\n",
        "    (\"USD -> GBP\", 0.82),      # Dólar estadounidense a Libra Esterlina\n",
        "    (\"GBP -> USD\", 1/0.82),    # Libra Esterlina a Dólar estadounidense\n",
        "    (\"USD -> JPY\", 142.5),     # Dólar estadounidense a Yen Japonés\n",
        "    (\"JPY -> USD\", 1/142.5),   # Yen Japonés a Dólar estadounidense\n",
        "    (\"USD -> CNY\", 7.2),       # Dólar estadounidense a Yuan Chino\n",
        "    (\"CNY -> USD\", 1/7.2),     # Yuan Chino a Dólar estadounidense\n",
        "    (\"USD -> CAD\", 1.36),      # Dólar estadounidense a Dólar Canadiense\n",
        "    (\"CAD -> USD\", 1/1.36),    # Dólar Canadiense a Dólar estadounidense\n",
        "]\n",
        "\n",
        "longitudes = [\n",
        "    (\"M -> KM\", 0.001),        # Metro a Kilómetro\n",
        "    (\"M -> CM\", 100),          # Metro a Centímetro\n",
        "    (\"M -> MM\", 1000),         # Metro a Milímetro\n",
        "    (\"M -> IN\", 39.3701),      # Metro a Pulgada\n",
        "    (\"M -> FT\", 3.28084),      # Metro a Pie\n",
        "    (\"M -> YD\", 1.09361),      # Metro a Yarda\n",
        "    (\"KM -> MI\", 0.621371),    # Kilómetro a Milla\n",
        "    (\"MI -> KM\", 1.60934),     # Milla a Kilómetro\n",
        "    (\"M -> µM\", 1_000_000),    # Metro a Micrómetro\n",
        "    (\"M -> NM\", 1_000_000_000) # Metro a Nanómetro\n",
        "]\n",
        "\n",
        "masas = [\n",
        "    (\"KG -> G\", 1000),         # Kilogramo a Gramo\n",
        "    (\"KG -> MG\", 1_000_000),   # Kilogramo a Miligramo\n",
        "    (\"KG -> LB\", 2.20462),     # Kilogramo a Libra\n",
        "    (\"KG -> OZ\", 35.274),      # Kilogramo a Onza\n",
        "    (\"G -> KG\", 0.001),        # Gramo a Kilogramo\n",
        "    (\"G -> MG\", 1000),         # Gramo a Miligramo\n",
        "    (\"LB -> KG\", 0.453592),    # Libra a Kilogramo\n",
        "    (\"OZ -> G\", 28.3495),      # Onza a Gramo\n",
        "    (\"T -> KG\", 1000),         # Tonelada a Kilogramo\n",
        "    (\"KG -> T\", 0.001)         # Kilogramo a Tonelada\n",
        "]\n",
        "\n",
        "almacenamiento = [\n",
        "    (\"B -> KB\", 1/1024),       # Byte a Kilobyte\n",
        "    (\"KB -> MB\", 1/1024),      # Kilobyte a Megabyte\n",
        "    (\"MB -> GB\", 1/1024),      # Megabyte a Gigabyte\n",
        "    (\"GB -> TB\", 1/1024),      # Gigabyte a Terabyte\n",
        "    (\"TB -> PB\", 1/1024),      # Terabyte a Petabyte\n",
        "    (\"KB -> B\", 1024),         # Kilobyte a Byte\n",
        "    (\"MB -> KB\", 1024),        # Megabyte a Kilobyte\n",
        "    (\"GB -> MB\", 1024),        # Gigabyte a Megabyte\n",
        "    (\"TB -> GB\", 1024),        # Terabyte a Gigabyte\n",
        "    (\"PB -> TB\", 1024)         # Petabyte a Terabyte\n",
        "]\n",
        "\n",
        "tiempos = [\n",
        "    (\"S -> MIN\", 1/60),        # Segundo a Minuto\n",
        "    (\"S -> H\", 1/3600),        # Segundo a Hora\n",
        "    (\"MIN -> S\", 60),          # Minuto a Segundo\n",
        "    (\"MIN -> H\", 1/60),        # Minuto a Hora\n",
        "    (\"H -> S\", 3600),          # Hora a Segundo\n",
        "    (\"H -> MIN\", 60),          # Hora a Minuto\n",
        "    (\"D -> H\", 24),            # Día a Hora\n",
        "    (\"SEM -> D\", 7),           # Semana a Día\n",
        "    (\"AÑO -> D\", 365),         # Año a Día\n",
        "    (\"D -> SEM\", 1/7)          # Día a Semana\n",
        "]\n",
        "\n",
        "volumenes = [\n",
        "    (\"L -> ML\", 1000),         # Litro a Mililitro\n",
        "    (\"L -> GAL\", 0.264172),    # Litro a Galón (EE. UU.)\n",
        "    (\"L -> PINT\", 2.11338),    # Litro a Pinta (EE. UU.)\n",
        "    (\"ML -> L\", 0.001),        # Mililitro a Litro\n",
        "    (\"GAL -> L\", 3.78541),     # Galón (EE. UU.) a Litro\n",
        "    (\"M³ -> L\", 1000),         # Metro cúbico a Litro\n",
        "    (\"L -> M³\", 0.001),        # Litro a Metro cúbico\n",
        "    (\"L -> CM³\", 1000),        # Litro a Centímetro cúbico\n",
        "    (\"OZ -> ML\", 29.5735),     # Onza líquida a Mililitro\n",
        "    (\"IN³ -> L\", 0.0163871)    # Pulgada cúbica a Litro\n",
        "]\n",
        "\n",
        "areas = [\n",
        "    (\"M² -> KM²\", 0.000001),       # Metro cuadrado a Kilómetro cuadrado\n",
        "    (\"M² -> HA\", 0.0001),          # Metro cuadrado a Hectárea\n",
        "    (\"M² -> ACRE\", 0.000247105),   # Metro cuadrado a Acre\n",
        "    (\"HA -> M²\", 10_000),          # Hectárea a Metro cuadrado\n",
        "    (\"ACRE -> M²\", 4046.86),       # Acre a Metro cuadrado\n",
        "    (\"KM² -> M²\", 1_000_000),      # Kilómetro cuadrado a Metro cuadrado\n",
        "    (\"M² -> CM²\", 10_000),         # Metro cuadrado a Centímetro cuadrado\n",
        "    (\"MANZ -> M²\", 6987),          # Manzana a Metro cuadrado\n",
        "    (\"TAREA -> M²\", 437.5),        # Tarea a Metro cuadrado\n",
        "    (\"M² -> MANZ\", 1/6987)         # Metro cuadrado a Manzana\n",
        "]\n",
        "\n",
        "\n",
        "# -------------------------\n",
        "# Funciones de cada conversor\n",
        "# -------------------------\n",
        "def mostrar_conversor(valor, lista, titulo):\n",
        "    print(f\"\\n=== Conversor de {titulo} ===\")\n",
        "    for nombre, factor in lista:\n",
        "        print(f\"{valor} {nombre} = {convertir(valor, factor):.4f}\")\n",
        "\n",
        "# -------------------------\n",
        "# MENÚ PRINCIPAL\n",
        "# -------------------------\n",
        "while True:\n",
        "    print(\"\\n===== MENÚ PRINCIPAL =====\")\n",
        "    print(\"1. Conversor de Monedas\")\n",
        "    print(\"2. Conversor de Longitud\")\n",
        "    print(\"3. Conversor de Masa\")\n",
        "    print(\"4. Conversor de Almacenamiento\")\n",
        "    print(\"5. Conversor de Tiempo\")\n",
        "    print(\"6. Conversor de Volumen\")\n",
        "    print(\"7. Conversor de Área\")\n",
        "    print(\"8. Salir\")\n",
        "\n",
        "    opcion = input(\"Elige una opción: \")\n",
        "\n",
        "    if opcion == \"1\":\n",
        "        valor = float(input(\"Ingrese cantidad en Dólares estadounidenses: \"))\n",
        "        mostrar_conversor(valor, monedas, \"Monedas\")\n",
        "    elif opcion == \"2\":\n",
        "        valor = float(input(\"Ingrese valor en Metros: \"))\n",
        "        mostrar_conversor(valor, longitudes, \"Longitud\")\n",
        "    elif opcion == \"3\":\n",
        "        valor = float(input(\"Ingrese valor en Kilogramos: \"))\n",
        "        mostrar_conversor(valor, masas, \"Masa\")\n",
        "    elif opcion == \"4\":\n",
        "        valor = float(input(\"Ingrese valor en Bytes: \"))\n",
        "        mostrar_conversor(valor, almacenamiento, \"Almacenamiento\")\n",
        "    elif opcion == \"5\":\n",
        "        valor = float(input(\"Ingrese valor en Segundos: \"))\n",
        "        mostrar_conversor(valor, tiempos, \"Tiempo\")\n",
        "    elif opcion == \"6\":\n",
        "        valor = float(input(\"Ingrese valor en Litros: \"))\n",
        "        mostrar_conversor(valor, volumenes, \"Volumen\")\n",
        "    elif opcion == \"7\":\n",
        "        valor = float(input(\"Ingrese valor en Metros cuadrados: \"))\n",
        "        mostrar_conversor(valor, areas, \"Área\")\n",
        "    elif opcion == \"8\":\n",
        "        print(\"¡Hasta luego! 🚀\")\n",
        "        break\n",
        "    else:\n",
        "        print(\"⚠ Opción inválida.\")"
      ],
      "metadata": {
        "id": "JFKHan6dKW2o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calcular_sueldo_neto():\n",
        "    \"\"\"\n",
        "    Calcula el sueldo neto mensual y quincenal aplicando deducciones:\n",
        "    AFP (7.25%), ISSS (3%) e ISR según tramos establecidos.\n",
        "    \"\"\"\n",
        "\n",
        "    # Tabla de tramos de ISR: [desde, hasta, %, exceso, cuota fija]\n",
        "    isr_tramos = [\n",
        "        [0.01,    472.00,    0,     0.00,      0.00],\n",
        "        [472.01,  895.24,   10,   472.00,     15.27],\n",
        "        [895.25,  2038.10,  20,   895.24,     60.00],\n",
        "        [2038.11, float('inf'), 30,  2038.10,    288.57],\n",
        "    ]\n",
        "\n",
        "    sueldo_bruto = float(input(\"Ingrese el sueldo bruto mensual: $\"))\n",
        "\n",
        "    afp = sueldo_bruto * 0.0725\n",
        "    isss = sueldo_bruto * 0.03\n",
        "    sueldo_para_isr = sueldo_bruto - afp\n",
        "    isr = 0.0\n",
        "\n",
        "    # Cálculo del ISR según el tramo\n",
        "    for desde, hasta, porcentaje, exceso, cuota in isr_tramos:\n",
        "        if desde <= sueldo_para_isr <= hasta:\n",
        "            isr = ((sueldo_para_isr - exceso) * porcentaje / 100) + cuota\n",
        "            break\n",
        "\n",
        "    sueldo_neto_mensual = sueldo_bruto - afp - isss - isr\n",
        "    sueldo_neto_quincenal = sueldo_neto_mensual / 2\n",
        "\n",
        "    # Mostrar resultados\n",
        "    print(\"\\n--- Resumen de Sueldo ---\")\n",
        "    print(f\"Sueldo bruto:           ${sueldo_bruto:.2f}\")\n",
        "    print(f\"AFP (7.25%):            ${afp:.2f}\")\n",
        "    print(f\"ISSS (3%):              ${isss:.2f}\")\n",
        "    print(f\"Base para ISR:          ${sueldo_para_isr:.2f}\")\n",
        "    print(f\"ISR:                    ${isr:.2f}\")\n",
        "    print(f\"Sueldo neto mensual:    ${sueldo_neto_mensual:.2f}\")\n",
        "    print(f\"Sueldo neto quincenal:  ${sueldo_neto_quincenal:.2f}\")\n",
        "    print(\"-------------------------\\n\")\n",
        "\n",
        "# Corrección del nombre de la condición principal\n",
        "if _name_ == \"_main_\":\n",
        "    calcular_sueldo_neto()"
      ],
      "metadata": {
        "id": "CzuM-7hTKahu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calcular_pago_agua(metros_consumidos):      ## pues esto representa cuántos metros cúbicos de agua se usaron\n",
        "    cuota_fija = 6.00\n",
        "    if metros_consumidos <= 18:                 ##Si el consumo es igual o menor alos 18 metros, solo se pagara la cuota fija nada más\n",
        "        total = cuota_fija\n",
        "    elif metros_consumidos <= 28:\n",
        "        exceso = metros_consumidos - 18\n",
        "        total = cuota_fija + (exceso * 0.45)    ##bueno aqui se calcula cuántos metros están por encima de 18 (exceso) y luego lo  multiplico por $0.45.\n",
        "    else:\n",
        "        exceso_1 = 10  ## # 10 m / 19 o 28            #Si el consumo es mayor a 28 metros lo divido en dos partes\n",
        "        exceso_2 = metros_consumidos - 28\n",
        "        total = cuota_fija + (exceso_1 * 0.45) + (exceso_2 * 0.65)\n",
        "    return round(total, 2)\n",
        "\n",
        "# Ejemplos de uso\n",
        "print(\"Consumo de 15 metros: $\", calcular_pago_agua(15))  # $6.00\n",
        "print(\"Consumo de 25 metros: $\", calcular_pago_agua(25))  # $9.15\n",
        "print(\"Consumo de 38 metros: $\", calcular_pago_agua(38))  # $17.00"
      ],
      "metadata": {
        "id": "bvoHhr1GKlPv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def acumulacion_meses_por_mes(n):\n",
        "    # use la fórmula triangular\n",
        "    return [(mes, (mes * (mes + 1)) // 2) for mes in range(1, n + 1)]\n",
        "\n",
        "def mostrar_tabla(tabla):\n",
        "    print(\"\\nTabla de acumulación de meses:\\n\")\n",
        "    print(f\"{'Mes':<6} | {'Acumulado':<10}\")\n",
        "    print(\"-\" * 22)\n",
        "    for mes, acumulado in tabla:\n",
        "        print(f\"{mes:<6} | {acumulado:<10}\")\n",
        "    print(\"-\" * 22)\n",
        "\n",
        "def iniciar():\n",
        "    print(\"Calculador de Meses Acumulados\\n\")\n",
        "    try:\n",
        "        n = int(input(\"Ingrese el número de meses (n): \"))\n",
        "        if n <= 0:\n",
        "            print(\"Por favor ingrese un número positivo.\")\n",
        "            return\n",
        "        tabla = acumulacion_meses_por_mes(n)\n",
        "        mostrar_tabla(tabla)\n",
        "        total = (n * (n + 1) * (n + 2)) // 6\n",
        "        print(f\"\\nAcumulación total hasta el mes {n}: {total} meses\\n\")\n",
        "    except ValueError:\n",
        "        print(\"Entrada inválida. Por favor ingrese un número entero.\")\n",
        "\n",
        "iniciar()"
      ],
      "metadata": {
        "id": "SbOpaKQ_KqJA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Caja: 1 caja = 25 unidades\n",
        "cajas = 80 / 25\n",
        "fraccion_caja = (3/5) * 25\n",
        "print(f\"Caja: 80 unidades = {cajas:.2f} cajas\")\n",
        "print(f\"3/5 de caja = {fraccion_caja:.2f} unidades\\n\")\n",
        "\n",
        "# Saco: 1 saco = 50 libras\n",
        "sacos = 130 / 50\n",
        "fraccion_saco = (2/30) * 50\n",
        "print(f\"Saco: 130 libras = {sacos:.2f} sacos\")\n",
        "print(f\"2/30 de saco = {fraccion_saco:.2f} libras\\n\")\n",
        "\n",
        "# Fardo: 1 fardo = 5 unidades\n",
        "fardos = 28 / 5\n",
        "fraccion_fardo = (5/3) * 5\n",
        "print(f\"Fardo: 28 unidades = {fardos:.2f} fardos\")\n",
        "print(f\"5/3 de fardo = {fraccion_fardo:.2f} unidades\")"
      ],
      "metadata": {
        "id": "qMpEBhwCKzag"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calcular_impuesto(monto):\n",
        "    impuestos = [(0.01, 500, 1.5, 0), (500.01, 1000, 1.5, 3), (1000.01, 2000, 3, 3), (2000.01, 3000, 6, 3), (3000.01, 6000, 9, 2), (6000.01, 8000, 12, 2), (8000.01, 18000, 15, 2), (18000.01, 30000, 39, 2), (30000.01, 60000, 63, 1), (60000.01, 100000, 93, 0.8), (100000.01, 200000, 125, 0.7), (200000.01, 300000, 195, 0.6), (300000.01, 400000, 255, 0.45), (400000.01, 500000, 300, 0.4), (500000.01, 1000000, 340, 0.3), (1000000.01, 99999999, 490, 0.18)]\n",
        "    for desde, hasta, precio, adicional in impuestos:\n",
        "        if desde <= monto <= hasta:\n",
        "            return round(((monto - desde) / 1000 * adicional) + precio, 2)\n",
        "    return None\n",
        "\n",
        "try:\n",
        "    monto_str = input(\"Monto: \").replace(',', '.')\n",
        "    monto = float(monto_str)\n",
        "\n",
        "    if monto <= 0:\n",
        "        print(\"Monto inválido.\")\n",
        "    else:\n",
        "        impuesto = calcular_impuesto(monto)\n",
        "        if impuesto is not None:\n",
        "            print(f\"Valor a pagar: ${impuesto:.2f}\")\n",
        "        else:\n",
        "            print(\"Monto fuera de rango.\")\n",
        "except ValueError:\n",
        "    print(\"Entrada inválida. Debe ser un número.\")"
      ],
      "metadata": {
        "id": "I7h0FJitDXaF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def cajero_automatico(cantidad):\n",
        "    \"\"\"\n",
        "    Simula el retiro de dinero de un cajero automático.\n",
        "\n",
        "    Args:\n",
        "        cantidad (float): La cantidad a retirar.\n",
        "    \"\"\"\n",
        "    # Denominaciones de billetes y monedas en orden descendente\n",
        "    denominaciones = {\n",
        "        'billetes_20': 20,\n",
        "        'billetes_10': 10,\n",
        "        'billetes_5': 5,\n",
        "        'billetes_1': 1,\n",
        "        'monedas_25': 0.25,\n",
        "        'monedas_10': 0.1,\n",
        "        'monedas_5': 0.05,\n",
        "        'monedas_1': 0.01\n",
        "    }\n",
        "\n",
        "    cantidad_restante = round(cantidad, 2)  # Redondeo para evitar errores de punto flotante\n",
        "\n",
        "    print(f\"Desglose para ${cantidad:.2f}:\")\n",
        "\n",
        "    for tipo, valor in denominaciones.items():\n",
        "        if cantidad_restante >= valor:\n",
        "            num_denominaciones = int(cantidad_restante // valor)\n",
        "            cantidad_restante = round(cantidad_restante - (num_denominaciones * valor), 2)\n",
        "\n",
        "            nombre_denominacion = \"\"\n",
        "            if tipo.startswith('billetes'):\n",
        "                nombre_denominacion = f\"{num_denominaciones} billetes de a ${valor:.0f}\"\n",
        "            else:\n",
        "                nombre_denominacion = f\"{num_denominaciones} monedas de ${valor:.2f}\"\n",
        "\n",
        "            print(nombre_denominacion)\n",
        "\n",
        "# Bloque principal para la interacción con el usuario\n",
        "try:\n",
        "    cantidad_str = input(\"Ingrese la cantidad a retirar: \")\n",
        "    cantidad_str = cantidad_str.replace(',', '.')\n",
        "\n",
        "    cantidad_a_retirar = float(cantidad_str)\n",
        "\n",
        "    if cantidad_a_retirar <= 0:\n",
        "        print(\"La cantidad debe ser un valor positivo.\")\n",
        "    else:\n",
        "        cajero_automatico(cantidad_a_retirar)\n",
        "\n",
        "except ValueError:\n",
        "    print(\"Entrada no válida. Por favor, ingrese un número válido.\")"
      ],
      "metadata": {
        "id": "BPH-hhrKDzTV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# CONVERSOR DE AREA HACIENDO USO DE DICCIONARIOS\n",
        "\n",
        "# Diccionario con equivalencias respecto al metro cuadrado\n",
        "unidades_area = {\n",
        "\"pie cuadrado\": 0.092903,\n",
        "\"vara cuadrada\": 0.6987,\n",
        "\"yarda cuadrada\": 0.836127,\n",
        "\"metro cuadrado\": 1,\n",
        "\"tarea\": 437.5,\n",
        "\"manzana\": 6987.42,\n",
        "\"hectarea\": 10000\n",
        "}\n",
        "\n",
        "\n",
        "# Función de conversion\n",
        "def convertir_area(valor, unidad_origen, unidad_destino):\n",
        "    \"\"\"Convierte un valor de una unidad de área a otra\"\"\"\n",
        "    if unidad_origen not in unidades_area or unidad_destino not in unidades_area:\n",
        "        return None\n",
        "    # Paso 1: convertir a metros cuadrados\n",
        "    valor_m2 = valor * unidades_area[unidad_origen]\n",
        "    # Paso 2: convertir a unidad destino\n",
        "    resultado = valor_m2 / unidades_area[unidad_destino]\n",
        "    return resultado\n",
        "\n",
        "\n",
        "# menu interactivo\n",
        "def mostrar_menu():\n",
        "    print(\"\\n=== Conversor de Áreas ===\")\n",
        "    print(\"Seleccione una opción:\")\n",
        "    print(\"1. Convertir áreas\")\n",
        "    print(\"2. Salir\")\n",
        "\n",
        "# Programa principal\n",
        "def main():\n",
        "    unidades_lista = list(unidades_area.keys())\n",
        "\n",
        "    while True:\n",
        "        mostrar_menu()\n",
        "        opcion = input(\"\\nIngrese opción: \")\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            print(\"\\nUnidades disponibles:\")\n",
        "            for i, unidad in enumerate(unidades_lista, start=1):\n",
        "                print(f\"{i}. {unidad}\")\n",
        "\n",
        "            try:\n",
        "                valor = float(input(\"\\nIngrese la cantidad a convertir: \"))\n",
        "                opcion_origen = int(input(\"Seleccione la unidad de ORIGEN (número): \"))\n",
        "                opcion_destino = int(input(\"Seleccione la unidad de DESTINO (número): \"))\n",
        "\n",
        "                unidad_origen = unidades_lista[opcion_origen - 1]\n",
        "                unidad_destino = unidades_lista[opcion_destino - 1]\n",
        "\n",
        "                resultado = convertir_area(valor, unidad_origen, unidad_destino)\n",
        "\n",
        "                if resultado is None:\n",
        "                    print(\"\\n Error: unidad no válida.\")\n",
        "                else:\n",
        "                    print(f\"\\n {valor} {unidad_origen} = {resultado:.4f} {unidad_destino}\")\n",
        "\n",
        "            except (ValueError, IndexError):\n",
        "                print(\"\\n Entrada inválida. Intente de nuevo.\")\n",
        "\n",
        "        elif opcion == \"2\":\n",
        "            print(\"\\n Gracias por usar el conversor de áreas.\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"\\n Opción no válida. Intente de nuevo.\")\n",
        "\n",
        "\n",
        "# Ejecutar el programa\n",
        "if _name_ == \"_main_\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "HTXy6Ja1D-rc"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}